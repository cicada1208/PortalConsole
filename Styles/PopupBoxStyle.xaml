<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToolTip.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:NullableToVisibilityConverter x:Key="NullVisibilityConverter" />
    <converters:NullableToVisibilityConverter x:Key="InvertedNullVisibilityConverter" NullValue="Visible" NotNullValue="Collapsed" />

    <materialDesign:PackIcon 
        x:Key="MaterialDesignMultiFloatingActionPopupBoxIcon" 
        Kind="Plus" Width="24" Height="24" 
        Foreground="{Binding RelativeSource={RelativeSource FindAncestor , AncestorType=materialDesign:PopupBox}, Path=Foreground}"/>

    <Style 
        x:Key="Style.PopupBox.MaterialDesignMultiFloatingAction.NoRotate"
        TargetType="{x:Type materialDesign:PopupBox}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="materialDesign:RippleAssist.Feedback" Value="White" />
        <Setter Property="PlacementMode" Value="TopAndAlignCentres" />
        <Setter Property="PopupMode" Value="Click" />
        <Setter Property="ToolTipService.Placement" Value="Left" />
        <Setter Property="ToolTipService.IsEnabled" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth2" />
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type materialDesign:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MaterialDesignToolTip}">
                            <Style.Setters>
                                <Setter Property="Margin" Value="8 10 8 10" />
                                <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.Content}" />
                            </Style.Setters>
                        </Style>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid x:Name="RootGrid" Background="{x:Null}">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="CheckedStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition From="*" To="Checked">
                                                            <Storyboard>
                                                                <!--To="45"-->
                                                                <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="0"
                                                                                 Duration="0:0:0.1">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                        <VisualTransition From="Checked" To="Unchecked">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                                 Storyboard.TargetProperty="Angle"
                                                                                 To="0"
                                                                                 Duration="0:0:0.1">
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseInOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </VisualTransition>
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState x:Name="Checked">
                                                        <Storyboard>
                                                            <!--To="45"-->
                                                            <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="0"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Unchecked">
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="ContentRotateTransform"
                                                                             Storyboard.TargetProperty="Angle"
                                                                             To="0"
                                                                             Duration="0" />
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                                                <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" 
                                                         Effect="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=materialDesign:PopupBox}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                                                         x:Name="border">
                                                </Ellipse>
                                            </AdornerDecorator>
                                            <materialDesign:Ripple Focusable="False"  
                                                        Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}" ClipToBounds="True"
                                                        materialDesign:RippleAssist.IsCentered="True"
                                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Padding="{TemplateBinding Padding}"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                                <!-- additional layer so we don't rotate the ripple directly which can cause jumpyness under certain layouts -->
                                                <ContentControl Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                RenderTransformOrigin=".5,.5" Focusable="False">
                                                    <ContentControl.RenderTransform>
                                                        <RotateTransform x:Name="ContentRotateTransform" Angle="0" />
                                                    </ContentControl.RenderTransform>
                                                </ContentControl>
                                            </materialDesign:Ripple>
                                            <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Opacity" Value="0.38"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="border" Property="materialDesign:ShadowAssist.Darken" Value="True" />
                                            </Trigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=materialDesign:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static materialDesign:PopupBoxPopupMode.MouseOver}">
                                                <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=materialDesign:PopupBox}, Path=PopupMode}"
                                                         Value="{x:Static materialDesign:PopupBoxPopupMode.MouseOverEager}">
                                                <Setter TargetName="RootGrid" Property="Background" Value="Transparent" />
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Storyboard x:Key="Open">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="Close">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.8">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleContent" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ExplicitToggleCheckedContent" Storyboard.TargetProperty="Opacity"
                                             To="0" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" 
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"                                      
                                      Cursor="Hand"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsTabStop="{TemplateBinding IsTabStop}"
                                      VerticalAlignment="Stretch"
                                      HorizontalAlignment="Stretch"
                                      ToolTip="{TemplateBinding ToolTip}"
                                      ToolTipService.Placement="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=materialDesign:PopupBox}, Path=(ToolTipService.Placement)}">
                            <Grid>
                                <ContentControl x:Name="StandardToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource InvertedNullVisibilityConverter}}" Focusable="False"/>
                                <ContentControl x:Name="ExplicitToggleContent" Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}" Focusable="False"/>
                                <ContentControl x:Name="ExplicitToggleCheckedContent" Content="{TemplateBinding ToggleCheckedContent}" ContentTemplate="{TemplateBinding ToggleCheckedContentTemplate}"
                                                Visibility="{TemplateBinding ToggleCheckedContent, Converter={StaticResource NullVisibilityConverter}}"
                                                Opacity="0"
                                                RenderTransformOrigin=".5,.5"
                                                Focusable="False">
                                    <ContentControl.RenderTransform>
                                        <RotateTransform Angle="-45" />
                                    </ContentControl.RenderTransform>
                                </ContentControl>
                            </Grid>
                        </ToggleButton>
                        <materialDesign:PopupEx x:Name="PART_Popup" 
                                     IsOpen="False"
                                     CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                                     PlacementTarget="{Binding ElementName=PART_Toggle}"
                                     Placement="Custom"
                                     PopupAnimation="None"
                                     AllowsTransparency="True">
                            <Grid>
                                <!-- with PopupBox.PopupMode == MouseOverEager the popup is always open, with 
                                     content hidden. but Transparent doesn't seem to register hit test in the popup.
                                     this opacity is the lowest I could get to register hit test. might try and speak
                                     to MS about this one, I *think* it is a bug -->
                                <Border Background="White" Opacity="0.002" />
                                <ContentControl Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"      
                                                Visibility="{TemplateBinding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                Margin="5" Padding="8"
                                                Opacity="0" x:Name="PART_PopupContentControl">
                                    <ContentControl.Resources>
                                        <ResourceDictionary>
                                            <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MaterialDesignToolTip}">
                                                <Style.Setters>
                                                    <Setter Property="Margin" Value="16 4 16 4" />
                                                    <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.Content}" />
                                                </Style.Setters>
                                            </Style>
                                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniLightButton}">
                                                <Style.Setters>
                                                    <Setter Property="ToolTipService.Placement" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=materialDesign:PopupBox}, Path=(ToolTipService.Placement)}"/>
                                                    <Setter Property="ToolTipService.InitialShowDelay" Value="0" />
                                                    <Setter Property="Margin" Value="4" />
                                                </Style.Setters>
                                            </Style>
                                        </ResourceDictionary>
                                    </ContentControl.Resources>
                                </ContentControl>
                            </Grid>
                        </materialDesign:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPopupOpen" Value="True">
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Open}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Close}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="PopupMode" Value="MouseOverEager" />
                                <Condition Property="IsVisible" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToggleContent" Value="{StaticResource MaterialDesignMultiFloatingActionPopupBoxIcon}" />
        <Style.Triggers>
            <Trigger Property="UnfurlOrientation" Value="Horizontal">
                <Setter Property="ToolTipService.Placement" Value="Custom" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style 
        x:Key="Style.PopupBox.MaterialDesignMultiFloatingActionDark.NoRotate" 
        BasedOn="{StaticResource Style.PopupBox.MaterialDesignMultiFloatingAction.NoRotate}"
        TargetType="{x:Type materialDesign:PopupBox}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
    </Style>

</ResourceDictionary>